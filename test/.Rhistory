# Save categorical features as factors
mutate_at(c("sex", "cp", "fbs", "restecg", "exang", "slope", "thal", "target", "catvar"),
as.factor) %>%
# Center and scale numeric features
mutate_if(is.numeric, scale)
View(data)
# Exploratory Data Analysis ####
plot_intro(data)
library(DMwR2)
data(algae)
plot_intro(algae)
plot_bar(data)
plot_correlation(data)
control <- rfeControl(functions = rfFuncs, # random forest
method = "repeatedcv", # repeated cv
repeats = 5, # number of repeats
number = 10) # number of folds
control
x <- data %>%
select(-target, -catvar, -contvar1, -contvar2, -contvar3) %>%
as.data.frame()
x <- data %>%
select(-target, -catvar, -contvar1, -contvar2, -contvar3) %>% # select是垂直方向的挑
as.data.frame()
# Target variable
y <- data$target
# Training: 80%; Test: 20%
set.seed(2021)
inTrain <- createDataPartition(y, p = .80, list = FALSE)[,1]
x_train <- x[ inTrain, ]
x_test  <- x[-inTrain, ]
y_train <- y[ inTrain]
y_test  <- y[-inTrain]
result_rfe1 <- rfe(x = x_train,
y = y_train,
sizes = c(1:13),
rfeControl = control)
result_rfe1
result_rfe1
predictors(result_rfe1)
# Print the results visually
ggplot(data = result_rfe1, metric = "Accuracy") + theme_bw()
ggplot(data = result_rfe1, metric = "Kappa") + theme_bw()
varimp_data <- data.frame(feature = row.names(varImp(result_rfe1))[1:8],
importance = varImp(result_rfe1)[1:8, 1])
varimp_data
ggplot(data = varimp_data,
aes(x = reorder(feature, -importance), y = importance, fill = feature)) +
geom_bar(stat="identity") + labs(x = "Features", y = "Variable Importance") +
geom_text(aes(label = round(importance, 2)), vjust=1.6, color="white", size=4) +
theme_bw() + theme(legend.position = "none")
predict(result_rfe1, x_test
predict(result_rfe1, x_test)
predict(result_rfe1, x_test)
y_test
postResample(predict(result_rfe1, x_test), y_test)
result_rfe2 <- rfe(x = x_train,
y = y_train,
sizes = c(1:17), # 17 features in total
rfeControl = control)
library(animation)
boot.iid()
## 3.3.2.1 多個參數待調 ------------------------------------------------------------------------
# 匯入信用風險資料集
credit <- read.csv("./_data/credit.csv")
## 3.3.2.1 多個參數待調 ------------------------------------------------------------------------
# 匯入信用風險資料集
credit <- read.csv("../_data/credit.csv")
## 3.3.2.1 多個參數待調 ------------------------------------------------------------------------
# 匯入信用風險資料集
credit <- read.csv("../_data/credit.csv")
## 3.3.2.1 多個參數待調 ------------------------------------------------------------------------
# 匯入信用風險資料集
credit <- read.csv(".._data/credit.csv")
## 3.3.2.1 多個參數待調 ------------------------------------------------------------------------
# 匯入信用風險資料集
credit <- read.csv("../_data/credit.csv")
market <- read.csv('D:/JamesKe/Program/期末專題/千禧世代租住房選擇/全聯家樂福/PX_MART.csv'
, header = T, fileEncoding = 'UTF-8-BOM')
park <- read.csv('D:/JamesKe/Program/期末專題/千禧世代租住房選擇/新北市戶外無菸休憩空間/新北市戶外無菸休憩空間.csv', header = T, fileEncoding = 'UTF-8-BOM')
market <- read.csv('D:/JamesKe/Program/期末專題/千禧世代租住房選擇/全聯家樂福/PX_MART.csv'
, header = T, fileEncoding = 'UTF-8-BOM')
market <- read.csv('D:/JamesKe/Program/期末專題/千禧世代租住房選擇/全聯家樂福/PX_MART.csv'
, header = T, fileEncoding = 'UTF-8-BOM')
View(market)
market <- read.csv('D:/JamesKe/Program/期末專題/千禧世代租住房選擇/全聯家樂福/PX_MART.csv', header = T, fileEncoding = 'UTF-8-BOM')
market <- read.csv('D:/JamesKe/Program/期末專題/千禧世代租住房選擇/全聯家樂福/PX_MART.csv', header = T, fileEncoding = 'UTF-8-BOM')
market <- read.table('D:/JamesKe/Program/期末專題/千禧世代租住房選擇/全聯家樂福/PX_MART.csv', header = T, fileEncoding = 'UTF-8-BOM')
market <- read.table('D:/JamesKe/Program/期末專題/千禧世代租住房選擇/全聯家樂福/PX_MART.csv', header = T, fileEncoding = 'UTF-8-BOM')
View(market)
market <- read.table('D:/JamesKe/Program/期末專題/千禧世代租住房選擇/全聯家樂福/PX_MART.csv', header = T, fileEncoding = 'UTF-8-BOM')
market <- read.table('D:/JamesKe/Program/期末專題/千禧世代租住房選擇/全聯家樂福/PX_MART.csv', header = T, fileEncoding = 'UTF-8')
market <- read.table('D:/JamesKe/Program/期末專題/千禧世代租住房選擇/全聯家樂福/PX_MART.csv', header = T, encoding = 'UTF-8')
View(market)
market <- read.table('D:/JamesKe/Program/期末專題/千禧世代租住房選擇/全聯家樂福/PX_MART.csv', header = T, encoding = 'UTF-8-BOM')
View(market)
market <- read.csv('D:/JamesKe/Program/期末專題/千禧世代租住房選擇/全聯家樂福/PX_MART.csv', header = T, encoding = 'UTF-8-BOM')
View(market)
market <- read.csv('D:/JamesKe/Program/期末專題/千禧世代租住房選擇/全聯家樂福/PX_MART.csv', header = T, fileEncoding = 'UTF-8-BOM')
market <- read.csv('D:/JamesKe/Program/期末專題/千禧世代租住房選擇/全聯家樂福/PX_MART.csv', header = T, fileEncoding = 'UTF-8-BOM')
market <- read.csv('D:/JamesKe/Program/期末專題/千禧世代租住房選擇/全聯家樂福/PX_MART.csv', header = T, encoding = 'UTF-8-BOM')
View(market)
# 學校資料
school <- read.csv('D:/JamesKe/Program/期末專題/千禧世代租住房選擇/新北市學校/school_original.csv', header = T, fileEncoding = 'UTF-8-BOM')
View(school)
school <- school[ , c(2,3,4,5,6,7,12,18,19)]
View(school)
write.csv('D:/JamesKe/Program/期末專題/千禧世代租住房選擇/新北市學校/school_final.csv', row.names = F)
write.csv(school, 'D:/JamesKe/Program/期末專題/千禧世代租住房選擇/新北市學校/school_final.csv', row.names = F)
market <- market[ , c(1,2,4,5)]
View(market)
# 匯出全聯資料
write.csv(market, 'D:/JamesKe/Program/期末專題/千禧世代租住房選擇/全聯家樂福/PX_MART_final.csv', row.names = F)
# 醫院資料
hospital <- read.csv('D:/JamesKe/Program/期末專題/千禧世代租住房選擇/新北市醫院地址清單/hospital_original.csv', header = T, fileEncoding = 'UTF-8-BOM')
View(hospital)
hospital <- hospital[ , c(1,3,4,40,41)]
View(hospital)
# 匯出醫院資料
write.csv(school, 'D:/JamesKe/Program/期末專題/千禧世代租住房選擇/新北市醫院地址清單/hospital_final.csv', row.names = F)
# 匯出醫院資料
write.csv(hospital, 'D:/JamesKe/Program/期末專題/千禧世代租住房選擇/新北市醫院地址清單/hospital_final.csv', row.names = F)
View(hospital)
# 學校資料
school <- read.csv('D:/JamesKe/Program/期末專題/千禧世代租住房選擇/新北市學校/school_original.csv', header = T, fileEncoding = 'UTF-8-BOM')
# 加油站資料
gas_station <- read.csv('D:/JamesKe/Program/期末專題/千禧世代租住房選/加油站/gas_station_original.csv', header = T, fileEncoding = 'UTF-8-BOM')
# 加油站資料
gas_station <- read.csv('D:/JamesKe/Program/期末專題/千禧世代租住房選擇/加油站/gas_station_original.csv', header = T, fileEncoding = 'UTF-8-BOM')
# 加油站資料
gas_station <- read.csv('D:/JamesKe/Program/期末專題/千禧世代租住房選擇/加油站/gas_station_original.csv', header = T, encoding = 'UTF-8-BOM')
View(gas_station)
# 加油站資料
gas_station <- read.csv('D:/JamesKe/Program/期末專題/千禧世代租住房選擇/加油站/gas_station_original.csv', header = F, encoding = 'UTF-8-BOM')
View(gas_station)
View(school)
str(gas_station)
?data.frame
names(gas_station)
# 修改column名稱
names(gas_station) <- c('縣市','行政區','名稱','地址')
View(gas_station)
# 匯出加油站資料
write.csv(gas_station, 'D:/JamesKe/Program/期末專題/千禧世代租住房選擇/加油站/gas_station_final.csv', row.names = F)
# 家樂福資料
carrefour <- read.csv('D:/JamesKe/Program/期末專題/千禧世代租住房選擇/全聯家樂福/Carrefour.csv', header = T)
# 家樂福資料
carrefour <- read.csv('D:/JamesKe/Program/期末專題/千禧世代租住房選擇/全聯家樂福/Carrefour.csv', header = T, fileEncoding = 'UTF-8-BOM')
Vire(carrefour)
View(carrefour)
carrefour1 <- carrefour[ , 1]
View(carrefour1)
library(stringr)
str_split_fixed(carrefour1, " ", 2)
str_split_fixed(carrefour1, "\n", 2)
str_split_fixed(carrefour1, "\n", 2)[1]
str_split_fixed(carrefour1, "\n", 2)[ , 1]
column1 <- str_split_fixed(carrefour1, "\n", 2)[ , 1]
column2 <- str_split_fixed(carrefour[ , 2], " ", 2)[ , 2]
column2
newcarrefour <- data.frame(column1, column2)
View(newcarrefour)
Name <- str_split_fixed(carrefour1, "\n", 2)[ , 1]
Address <- str_split_fixed(carrefour[ , 2], " ", 2)[ , 2]
newcarrefour <- data.frame(Name, Address)
View(newcarrefour)
mydata <- read.csv("D:/JamesKe/Program/期末專題/千禧世代租住房選擇/realEstate/realEstate.csv", header = T, fileEncoding = 'UTF-8-BOM')
mydata <- read.csv("D:/JamesKe/Program/期末專題/千禧世代租住房選擇/realEstate/realEstate.csv", header = T, fileEncoding = 'UTF-8-BOM')
View(mydata)
# 測試資料
mydata1 <- read.csv("D:/JamesKe/Program/期末專題/千禧世代租住房選擇/realEstate/realEstate_1.csv", header = T, fileEncoding = 'UTF-8-BOM')
# 測試資料
mydata2 <- read.csv("D:/JamesKe/Program/期末專題/千禧世代租住房選擇/realEstate/realEstate_2.csv", header = T, fileEncoding = 'UTF-8-BOM')
View(mydata1)
View(mydata2)
mydata <- read.csv("D:/JamesKe/Program/期末專題/千禧世代租住房選擇/realEstate/Estate.csv", header = T, fileEncoding = 'UTF-8-BOM')
mydata <- read.csv("D:/JamesKe/Program/期末專題/千禧世代租住房選擇/realEstate/Estate.csv", header = T, fileEncoding = 'UTF-8-BOM')
View(mydata)
mydata <- read.csv("D:/JamesKe/Program/期末專題/千禧世代租住房選擇/realEstate/Estate.csv", header = F, fileEncoding = 'UTF-8-BOM')
mydata <- read.csv("D:/JamesKe/Program/期末專題/千禧世代租住房選擇/realEstate/realEstate.csv", header = F, fileEncoding = 'UTF-8-BOM')
View(mydata)
mydata <- read.csv("D:/JamesKe/Program/期末專題/千禧世代租住房選擇/realEstate/realEstate.csv", header = T, fileEncoding = 'UTF-8-BOM')
View(mydata)
mydata <- read.csv("D:/JamesKe/Program/期末專題/千禧世代租住房選擇/realEstate/realEstate.csv", header = T, fileEncoding = 'UTF-8-BOM')
mydata <- read.csv("D:/JamesKe/Program/期末專題/千禧世代租住房選擇/realEstate/realEstate.csv", header = T, fileEncoding = 'UTF-8-BOM')
# 加油站資料
gas_station <- read.csv('D:/JamesKe/Program/期末專題/千禧世代租住房選擇/加油站/gas_station_original.csv', header = F, encoding = 'UTF-8-BOM')
View(gas_station)
# get_coordinate(test)
test <- gas_station[ , 4]
test
# 加油站資料
gas_station <- read.csv('D:/JamesKe/Program/期末專題/千禧世代租住房選擇/加油站/gas_station_original.csv', header = F, encoding = 'UTF-8-BOM')
# 修改column名稱
names(gas_station) <- c('行政區','名稱','地址')
View(gas_station)
# 修改column名稱
names(gas_station) <- c('縣市','行政區','名稱','地址')
# 匯出加油站資料
write.csv(gas_station, 'D:/JamesKe/Program/期末專題/千禧世代租住房選擇/加油站/gas_station_final.csv', row.names = F)
gas_station <- read.csv('D:/JamesKe/Program/期末專題/千禧世代租住房選擇/加油站/gas_station_final.csv', header = F)
View(gas_station)
gas_station <- read.csv('D:/JamesKe/Program/期末專題/千禧世代租住房選擇/加油站/gas_station_final.csv', header = F, encoding = 'utf-8')
View(gas_station)
gas_station <- read.csv('D:/JamesKe/Program/期末專題/千禧世代租住房選擇/加油站/gas_station_final.csv', header = F, fileEncoding = 'utf-8-bom')
gas_station <- read.csv('D:/JamesKe/Program/期末專題/千禧世代租住房選擇/加油站/gas_station_final.csv', header = F, fileEncoding = 'UTF-8-BOM')
View(gas_station)
gas_station <- read.csv('D:/JamesKe/Program/期末專題/千禧世代租住房選擇/加油站/gas_station_final.csv', header = T, fileEncoding = 'UTF-8-BOM')
View(gas_station)
# 全聯資料
market <- read.csv('D:/JamesKe/Program/期末專題/千禧世代租住房選擇/全聯家樂福/PX_MART.csv', header = T, encoding = 'UTF-8-BOM')
View(market)
market <- market[ , c(2,4,5)]
View(market)
PX_MART <- read.csv('D:/JamesKe/Program/期末專題/千禧世代租住房選擇/全聯家樂福/PX_MART_final.csv', header = T)
PX_MART <- read.csv('D:/JamesKe/Program/期末專題/千禧世代租住房選擇/全聯家樂福/PX_MART_final.csv', header = T)
PX_MART <- read.csv('D:/JamesKe/Program/期末專題/千禧世代租住房選擇/全聯家樂福/PX_MART_final.csv', header = T, encoding = 'utf-8')
PX_MART <- read.csv('D:/JamesKe/Program/期末專題/千禧世代租住房選擇/全聯家樂福/PX_MART_final.csv', header = T, fileEncoding = 'utf-8')
View(PX_MART)
PX_MART <- read.csv('D:/JamesKe/Program/期末專題/千禧世代租住房選擇/全聯家樂福/PX_MART_final.csv', header = T, fileEncoding = 'UTF-8-BOM')
View(PX_MART)
# 測試轉成經緯度的資料能否讀進
gas_station <- read.csv('D:/JamesKe/Program/期末專題/千禧世代租住房選擇/加油站/gas_station_final.csv', header = T, fileEncoding = 'UTF-8-BOM')
View(gas_station)
### 4.2.2 線上音樂城關聯規則分析 Online music ####
lastfm <- read.csv(file.choose()) # choose lastfm.csv
str(lastfm) # 289955 obs. of  4 variables
### 4.2.2 線上音樂城關聯規則分析 Online music ####
lastfm <- read.csv(file.choose()) # choose lastfm.csv
### 4.2.2 線上音樂城關聯規則分析 Online music ####
lastfm <- read.csv(file.choose()) # choose lastfm.csv
str(lastfm) # 289955 obs. of  4 variables
lastfm[10:20,] # 顯然是長表，且user標號有跳號的現象
length(unique(lastfm$user)) # 15000 users
lastfm$user <- factor(lastfm$user) # from class "integer" to class "factor"
nlevels(lastfm$user) # 15000 levels (users)
lastfm$artist <- factor(lastfm$artist) # from class "character" to class "factor"
nlevels(lastfm$artist) # 1004 artists (or bands)
# 把長表依user編號斷開成15000元素elements的串列
playlist <- split(x=lastfm$artist,f=lastfm$user) ## split a vector into groups, wow ! It's a large list of 938.3 Mb
##### A litlle bit detour!
(x <- 1:10)
(y <- c("E", "D", rep("A",3), rep("D",3), "E", "E"))
split(x, y)
#####
str(playlist) # A large list, the artists each user bought !
playlist[1:2] # the first two listeners (1 and 3) listen to the following bands (元素有長有短！)
library(arules) # for Association Rules package
musicrules <- apriori(playlist,parameter=list(support=.01,confidence=.5)) # only rules with support > 0.01 and confidence > .50 # Error in asMethod(object) : can not coerce list with transactions with duplicated items
# Actually, an error will occur as u coerce "list" to "transactions"!
playlist <- as(playlist, "transactions")
duplicatedArtist <- function(x) {
length(x) != length(unique(x))
} # a function for identifying duplicatedArtist
sum(sapply(playlist, duplicatedArtist)) # 2
which(sapply(playlist, duplicatedArtist)) # 6980 (5290) & 9753 (7422)
##### A lit bit detour !
(x <- 10:1)
x < 3
which(x < 3) # return indexes where x is less than 3
## 5.1.2 偏最小平方法迴歸 ####
## ----warning=FALSE, message=FALSE----------------------------------------
# 載入R語言偏最小平方法估計套件
library(pls)
## 5.1.2 偏最小平方法迴歸 ####
## ----warning=FALSE, message=FALSE----------------------------------------
# 載入R語言偏最小平方法估計套件
library(pls)
# 模型公式語法擬合模型
plsFit <- plsr(Solubility ~ ., data = trainingData)
library(AppliedPredictiveModeling)
# 載入溶解度資料的數個資料物件
data(solubility)
# 資料物件名都是以solT開頭的名稱
ls(pattern = "^solT")
## ------------------------------------------------------------------------
# 計算樣本總數
nrow(solTrainXtrans) + nrow(solTestXtrans)
# 預測變數個數
ncol(solTrainXtrans)
## ------------------------------------------------------------------------
# 合併屬性矩陣X與類別標籤向量y，產生統計人群慣用的資料表
trainingData <- solTrainXtrans
## 5.1.2 偏最小平方法迴歸 ####
## ----warning=FALSE, message=FALSE----------------------------------------
# 載入R語言偏最小平方法估計套件
library(pls)
# 模型公式語法擬合模型
plsFit <- plsr(Solubility ~ ., data = trainingData)
# 凡事總有例外，mvr類別物件
class(plsFit)
# 載入溶解度資料的數個資料物件
data(solubility)
# 模型公式語法擬合模型
plsFit <- plsr(Solubility ~ ., data = trainingData)
# 載入溶解度資料的數個資料物件
data(solubility)
# 載入溶解度資料的數個資料物件
data(Solubility)
# 載入溶解度資料的數個資料物件
data(solubility)
View(solTrainX)
## 5.1 線性迴歸與分類 ####
## 5.1.1 多元線性迴歸 ------------------------------------------------------------------------
library(AppliedPredictiveModeling)
# 載入溶解度資料的數個資料物件
data(solubility)
# 資料物件名都是以solT開頭的名稱
ls(pattern = "^solT")
## ------------------------------------------------------------------------
# 計算樣本總數
nrow(solTrainXtrans) + nrow(solTestXtrans)
# 預測變數個數
ncol(solTrainXtrans)
## ------------------------------------------------------------------------
# 合併屬性矩陣X與類別標籤向量y，產生統計人群慣用的資料表
trainingData <- solTrainXtrans
trainingData$Solubility <- solTrainY
## 5.1.2 偏最小平方法迴歸 ####
## ----warning=FALSE, message=FALSE----------------------------------------
# 載入R語言偏最小平方法估計套件
library(pls)
# 模型公式語法擬合模型
plsFit <- plsr(Solubility ~ ., data = trainingData)
# 凡事總有例外，mvr類別物件
class(plsFit)
# 擬合結果摘要報表
summary(plsFit)
library(imap)
library(lmap)
install(lamp)
install.packages('lmap')
install.packages("geosphere")
library(geosphere)
print1 <- c(25.0056458, 121.4701595)
print2 <- c(25.2195534, 121.628399)
print_mat <- matrix(c(point1, point2), ncol = 2)
point1 <- c(25.0056458, 121.4701595)
library(geosphere)
point1 <- c(25.0056458, 121.4701595)
point2 <- c(25.2195534, 121.628399)
print_mat <- matrix(c(point1, point2), ncol = 2)
print('Original Matrix')
print(point_mat)
point_mat <- matrix(c(point1, point2), ncol = 2)
print('Original Matrix')
print(point_mat)
print('Haversine Distance')
distHaversine(print_mat)
point1 <- c(121.4701595, 25.0056458)
point2 <- c(121.628399, 25.2195534 )
point_mat <- matrix(c(point1, point2), ncol = 2)
print('Original Matrix')
print(point_mat)
print('Haversine Distance')
distHaversine(print_mat)
geospatial_dist <- distm(point_mat, fun = distGeo)
print(geospatial_dist)
geospatial_dist <- distm(point_mat, fun = distGeo)
print('Distance Matrix')
point1 <- c(121.4701595, 25.0056458)
point2 <- c(25.2195534, 121.628399 )
point_mat <- matrix(c(point1, point2), ncol = 2)
print('Original Matrix')
print(point_mat)
geospatial_dist <- distm(point_mat, fun = distGeo)
point1 <- c(121.4701595, 25.0056458)
point2 <- c(121.628399, 25.2195534)
point_mat <- matrix(c(point1, point2), ncol = 2)
print('Original Matrix')
print(point_mat)
geospatial_dist <- distm(point_mat, fun = distGeo)
?geospatial
?distm
xy <- rbind(c(0,0),c(90,90),c(10,10),c(-120,-45))
xy
distm(xy)
xy2 <- rbind(c(0,0),c(10,-10))
distm(xy, xy2)
xy2
?distHaversine
point1 <- c(121.4701595, 25.0056458)
point2 <- c(121.628399, 25.2195534)
print('Original Matrix')
print(point_mat)
print('Haversine Distance')
distHaversine(point1, point2)
disim(point1, point2)
distm(point1, point2)
install.packages(geodist)
install.packages('geodist')
library(geodist)
?geodist
point1 = c(121.4701595, 25.0056458)
point2 = c(121.628399, 25.2195534)
dist <- geodist(
point1,
point2
)
point_mat <- c(point1, point2)
point_mat
library(geosphere)
test <- distm(c(121.4701595, 25.0056458), c(121.628399, 25.2195534), fun = distHaversine)
test
install.packages('geodist')
library(geosphere)
test <- distm(c(121.4701595, 25.0056458), c(121.628399, 25.2195534), fun = distHaversine)
test
data <- read.csv('D:/JamesKe/Program/期末專題/千禧世代租住房選擇/part3.csv')
data
data <- read.csv('D:/JamesKe/Program/期末專題/千禧世代租住房選擇/part3.csv')
View(data)
data <- read.csv('D:/JamesKe/Program/期末專題/千禧世代租住房選擇/part3.csv')
View(data)
data <- read.csv('D:/JamesKe/Program/期末專題/千禧世代租住房選擇/part3.csv', encoding = 'UTF-8')
View(data)
data <- read.csv('D:/JamesKe/Program/期末專題/千禧世代租住房選擇/part3.csv', fileEncoding = 'UTF-8')
View(data)
data <- read.csv('D:/JamesKe/Program/期末專題/千禧世代租住房選擇/part3.csv', fileEncoding = 'UTF-8', header = FALSE)
View(data)
data <- data[ , 1]
View(data)
reticulate::repl_python()
'''
# 繪製ROC曲線需計算測試資料的類別機率預測值
knnPredict <- predict(knnFit,newdata = testing , type="prob")
## 2.1 資料管理 ####
## 2.1.1 R語言資料組織與排序 ------------------------------------------------------------------------
# 創建姓名與成績向量，注意指令有無包在小括弧裡的差異
(Student <- c("John Davis", "Angela Williams",
"Bullwinkle Moose", "David Jones", "Janice Markhammer",
"Cheryl Cushing", "Reuven Ytzrhak", "Greg Knox",
"Joel England", "Mary Rayburn"))
(Math <- c(502, 600, 412, 358, 495, 512, 410, 625, 573, 522))
Science <- c(95, 99, 80, 82, 75, 85, 80, 95, 89, 86)
# Activate the R packages ####
library("dplyr")
library("faux") # Simulation for Factorial Designs
library("DataExplorer") # Automate Data Exploration and Treatment
library("caret")
library("randomForest")
# Import the dataset ####
file = "https://raw.githubusercontent.com/okanbulut/tds/main/feature_selection_rfe/heart.csv"
data <- read.csv(file, header = TRUE)
head(data)
# add four pseudo-variables ####
# Set the seed for reproducibility
set.seed(2021)
# Add four pseudo variables into the data
data <- mutate(data, # R語言泛函式編程寫法
# random categorical variable
catvar = as.factor(sample(sample(letters[1:3], nrow(data), replace = TRUE))),
# random continuous variable (mean = 10, sd = 2, r = 0)
contvar1 = rnorm(nrow(data), mean = 10, sd = 2),
# continuous variable with low correlation (mean = 10, sd = 2, r = 0.2), r: desired correlation(s) between existing and returned vectors
contvar2 = rnorm_pre(data$target, mu = 10, sd = 2, r = 0.2, empirical = TRUE), # Make a normal vector correlated to existing vectors
# continuous variable with moderate correlation (mean = 10, sd = 2, r = 0.5)
contvar3 = rnorm_pre(data$target, mu = 10, sd = 2, r = 0.5, empirical = TRUE))
house <- read.csv('D:/JamesKe/Program/期末專題/千禧世代租住房選擇/toTGOS/part2(with laglog).csv', encoding = 'utf-8')
View(house)
house <- read.csv('D:/JamesKe/Program/期末專題/千禧世代租住房選擇/toTGOS/part2(with laglog).csv', encoding = 'utf-8-bom')
house <- read.csv('D:/JamesKe/Program/期末專題/千禧世代租住房選擇/toTGOS/part2(with laglog).csv', fileEncoding = 'utf-8-bom')
amesKe/Program/期末專題/千禧世代租住房選擇/toTGOS/part2(with laglog).csv', fileEncoding = '
house <- read.csv('D:/JamesKe/Program/期末專題/千禧世代租住房選擇/toTGOS/part2(with laglog).csv', fileEncoding = 'UTF-8-BOM')
View(house)
house <- read.csv('D:/JamesKe/Program/期末專題/千禧世代租住房選擇/toTGOS/part2(with laglog).csv', fileEncoding = 'UTF-8-BOM', header = FALSE)
View(house)
setwd("D:/JamesKe/Program/期末專題/千禧世代租住房選擇/新北市戶外無菸休憩空間")
View(mydata)
al.csv', fileEncoding = 'UTF-8')
View(data)
data <- read.csv('park_final.csv', fileEncoding = 'UTF-8-BOM')
data <- read.csv('park_final.csv')
data <- read.csv('park_final.csv')
data <- read.csv('park_final.csv', encoding = 'ANSI')
data <- read.csv('park_final.csv', encoding = 'UTF-8')
data <- read.csv('park_final.csv', encoding = 'UTF-8-BOM')
View(data)
data <- read.csv('park_final.csv', fileEncoding = 'UTF-8')
data <- read.csv('park_final.csv', fileEncoding = 'UTF-8-BOM')
View(data)
data <- read.csv('park_final.csv', fileEncoding = 'UTF-8-BOM')
View(data)
#park
park <- read.csv("Park.csv", sep=",",stringsAsFactors=F, fileEncoding ="big5")
setwd("D:/JamesKe/Program/期末專題/千禧世代租住房選擇/test")
#park
park <- read.csv("Park.csv", sep=",",stringsAsFactors=F, fileEncoding ="big5")
View(park)
#park
park <- read.csv("park_final.csv", sep=",",stringsAsFactors=F, fileEncoding ="big5")
#park
park <- read.csv("park_final.csv", sep=",",stringsAsFactors=F, fileEncoding ="utf-8")
park <- separate(park, col=Lan..Long, into = c("lat", "lon"), sep = ",") # split Lat Lon
park <- park[,c(1,3,2)] # change order to lon, lat
#park
park <- read.csv("park_final.csv", sep=",",stringsAsFactors=F, fileEncoding ="utf-8", header = F)
park <- separate(park, col=Lan..Long, into = c("lat", "lon"), sep = ",") # split Lat Lon
View(park)
park <- separate(park, col=V2, into = c("lat", "lon"), sep = ",") # split Lat Lon
# gas
gas <- read.csv("GasStation.csv", fileEncoding ="UTF-8")
View(gas)
View(gas)
gas <- separate(gas, col=Lan..Long, into = c("lat", "lon"), sep = ",") # split Lat Lon
library(geosphere)
library(tidyr)
library(dplyr)
park <- separate(park, col=V2, into = c("lat", "lon"), sep = ",") # split Lat Lon
park <- park[,c(1,3,2)] # change order to lon, lat
park <- park[,-1]
View(park)
